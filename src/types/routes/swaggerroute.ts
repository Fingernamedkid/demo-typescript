/**
 * @openapi
 * components:
 *     User:
 *       type: object
 *       required:
 *         - email
 *         - password
 *         
 *       properties:
 *         id:
 *           type: string
 *           description: L'ID auto-généré de l'utilisateur
 *         name:
 *           type: string
 *           description: Le nom de l'utilisateur
 *         email:
 *           type: string
 *           description: Le courriel de l'utilisateur
 *         password:
 *           type: string
 *           description: le mot de pass encrypté de l'utilisateur
 *         role:
 *           type: string
 *           description: Le role de l'utilisateur
 *       example:
 *         id: 1
 *         name: "Nihahahahaha"
 *         email: "john.doe@example.com"
 *         password: "John Doe"
 *         role: "admin"
 *
 *     Product:
 *       type: object
 *       required:
 *         - title
 *         - price
 *         - stock
 *       properties:
 *         id:
 *           type: integer
 *           description: L'ID auto-généré du produit
 *         title:
 *           type: string
 *           description: Le titre du produit
 *         description:
 *           type: string
 *           description: La description du produit
 *         category:
 *           type: string
 *           description: La catégorie du produit
 *         price:
 *           type: number
 *           description: Le prix du produit
 *         stock:
 *           type: integer
 *           description: Le stock disponible du produit
 *         image:
 *           type: string
 *           description: URL de l'image du produit
 *         rating:
 *           type: object
 *           properties:
 *             rate:
 *               type: number
 *               description: Note moyenne du produit
 *             count:
 *               type: integer
 *               description: Nombre d'évaluations du produit
 *       example:
 *         id: 1
 *         title: "Produit Exemple"
 *         description: "Ceci est une description d'exemple."
 *         category: "Catégorie Exemple"
 *         price: 19.99
 *         stock: 100
 *         image: "http://example.com/image.jpg"
 *         rating:
 *           rate: 4.5
 *           count: 150
 */
/**
 * @openapi
 * components:
 *   securitySchemes:
 *     bearerAuth: # arbitrary name for the security scheme
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 */
/**
 * @openapi
 * tags:
 *   - name: Users
 *     description: API pour gérer les utilisatereurs
 *   - name: Products
 *     description: API pour gérer les produits
 */
/**
 * @openapi
 * /products:
 *   get:
 *     summary: Récupère la liste des produits
 *     tags: [Products]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: minPrice
 *         in: query
 *         description: Filtre de prix minimum
 *         required: false
 *         schema:
 *           type: number
 *       - name: maxPrice
 *         in: query
 *         description: Filtre de prix maximum
 *         required: false
 *         schema:
 *           type: number
 *       - name: minStock
 *         in: query
 *         description: Filtre de stock minimum
 *         required: false
 *         schema:
 *           type: number
 *       - name: maxStock
 *         in: query
 *         description: Filtre de stock maximum
 *         required: false
 *         schema:
 *           type: number
 *     responses:
 *       200:
 *         description: Liste des produits récupérée avec succès
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Product'
 *       404:
 *         description: Aucun produit trouvé
 *       500:
 *         description: Erreur interne du serveur
 */

/**
 * @openapi
 * /products:
 *   post:
 *     summary: Ajoute un nouveau produit
 *     tags: [Products]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Product'
 *     responses:
 *       201:
 *         description: Produit ajouté avec succès
 *       403:
 *         description: Requête invalide
 *       500:
 *         description: Erreur interne du serveur
 */

/**
 * @openapi
 * /products/{id}:
 *   put:
 *     summary: Modifie un produit existant
 *     tags: [Products]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID du produit à modifier
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Product'
 *     responses:
 *       200:
 *         description: Produit modifié avec succès
 *       404:
 *         description: Produit non trouvé
 *       500:
 *         description: Erreur interne du serveur
 */

/**
 * @openapi
 * /products/{id}:
 *   delete:
 *     summary: Supprime un produit existant
 *     tags: [Products]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: ID du produit à supprimer
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Produit supprimé avec succès
 *       204:
 *         description: Aucun produit à supprimer
 *       500:
 *         description: Erreur interne du serveur
 */

/**
 * @openapi
 * /users/login:
 *   post:
 *     summary: Authentifie un utilisateur
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: Authentification réussie, renvoie le jeton d'accès
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 accessToken:
 *                   type: string
 *       401:
 *         description: Identifiants invalides
 *       500:
 *         description: Erreur interne du serveur
 */


















































































































/**
 * Im loosing it
 * NIHAHAHAHAHA
 +++===~~~~~~~~===++++++++++===~~----::::::--~=====++==~~~~~~~~~=++++++++++++==~~~~~~~~~=++++++++===~~-::::-------:::::::-++===~~~~~~~~=*^><<<)<><<<<<<<>
===+++++++======~~~~~~~~~==++***++===~---:::::::::----~========~~~~~~~==+++******+=====~~----:::::::::::::::::::::::::::::-=^^*++=======~~~~~=+**>(()<>>
==~~~~~~~~~=+******+======~~~~~~~~~~=+****++=-----::::~+*^><<<<>^***+++++=+++++++++++*****^^>>*=~-~~~~~~----~=*^>^+=~=^([[}[)<)(^~~~~=******======~~=++*
+**^^*+====~~~~~~~~=*>>^*+****+=~====~~~~~~~~~~=^<)^+====================================~=======+^<(((>~--~[}}}}}}}}}}{{}^*++++**<])>*~~^))^=~=+**^^^+=
~~~~~~~~~=+***^*+^(>*<]}}}{#}[##{}}{{[>~~+^)()*=======++++***^^^^^*+========================++=====~~~~==*)]}}}}}}}}}{####{}}[)^++++*^(<=--~~=<<=~~~~~~~
^^*+~~~~~~+>][{}>*+++**>(}}}}}}}}}}}}}])^=~~~==+*^+================================================~~===~~~~~*({####%#########{{}}>*+**<}{@(~~~~~>])+~~~
======+^)*~+>^+++**<[}}}}}}}}}}}}}}(^~====++=============================================~=~~~~===~~~~~~~~=*+=~~^){#%%%%%%%%%%%%###{{{}{%%%[~~~~~~~~+<>*
=~~=^)^=({)^*+++<[}}}}}}}}}}}}}}[<==*^*==================~~~=~~~=======~~~~~~~~~==============~~~~~~~~~~~~~~~~=**+=*<[#%%%%%%%%%%%%%%%%%%%%^~~~~~~~~~~~=
=^>>=~~]@##{{[)]}}}}}}}}}}}}}}(^=*^+=~=~~~=======~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~==~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+>^**<[#%%%%%%%%%#####{}{[*~~~~~~~~~~~
^=~~~~~~(%%%%%#{}}}}}}}}}}}])^^*+~~~~~~~~~~~~~~=======~~=====~==~==========~===~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~====*^<<({%%%%%%%{}}}}}}}{{(=~~~~~~~~~
~~~~~~~~+{{{{####{}}}}}}}]()^=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=+~~~~~~~~~~~~~~~~~~~~~~~=~==~~+>([#%%%%%%#{}}}}}}}{{+~~~~~~~~
~~~~~~~*#}}}}}}}}}}}}}}}(>+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~===+=~~~~~~~~~~~~~~~===========+>]#%%%%%%{}}[(<*==>~~~~~~~~
~~~~~~^#}}}}}}}}}}}}}}[<=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~======+*==~~~~~~~~~===~~~~~~~~===~=*(<~---:::::::::>+~~~~~~~
~~~~~=>)[}}}}}}}}}}}[*=~=~~~~~~~~~~~~~~~~~~~==~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~++==========~=======+===========~~~~~~~~~~===~=^(=::::::::::-(~~~~~~=
~~~~~=+::::::::::~<^~~~~=~~~~~=====~~~======~~=~~~~~==~~~~~~=*=~======~~~~~~~~~~~~~=*>=~=~~~~~~~~~~~~~~~=+*==========~~~~~~~~~~~~~~=^(+:::::::::<+~~~~~~
~~~~~=*-:::::::-<)=~=====~~===~~~=~====*+=~===~~~~~~~~~~~~~=+==========~~~~~~==~~~===^^===~~~~~~~~~~~~~~~~=+*===~~===~~~~~~~~~~~~~===~^(+-:::~~--~>+=~~~
~~~~~+^~~-::::*]=~~~~==~~~~~~~~~~===+*+=~===~~~~~~~~~~~~~~==*===========~~~~~~~~~=====^*=~~~~~~~~~~~~~~~~~~==+*==~===~~~~~~~~~~~~~===~~~+]*-:::::::::=^~
~~~~+^>*~~::=)^~~~~~===~=====~~===+**======~~~~~~~~~~~~~~==**===========~~~~~~~~~~====+^+==~~~~~~~~~~~~~~~==~~=+*+===~==~~~~~~~~~~~~~~=~~~^)~::::::-=^+~
~=+*=:::::-^<=~~~~~===~~~~~~~~===***======~~~~~~~~~~~~~~=~=>*==========~~~~~~~~~~~~~===^^=~~~~~~~~~~~~~~~~~~=====+*+=====~~~~~~~~~~~~~=~~~~*<=--~~~*^=~~
~*=::::::~>>=~~~~=====~~~~~~===+**+========~======~~~======<^====~~~~~~~~~~~~~~~~=======<*======~~~~~~~~~~=========**+==================~=~~*<+~~~^^++=~
~=*^+----^)~~~~~==~~~~~~~~~~~=+**+=====~~=~======~~~~~~==+*]^====~~=~~~~~~~~~~~~========<^==========================*>*====================~~+(*^+=+*+==
==**+^*-~(+~~~=~==~~~~~======+***==========+==========~=+^)+>*===~~=~~======~=~=========^(>*+========================+^<*==================~~~=[=~~=**==
=**+=~=*<)~~~=====~~~~======+***+========++============+^>=-)^=~~========================<=)<*+==========^============+^<*===================*+*>~~=**+=
+*+=====]+=====~~~~=========****========**============*<>---~]==~======+*+===============>~:-*)**+=========^+===========*>++=================*+*]~~=**+=
+*+=~==>)===================***+======+*============+>>~~~---^)========+*+============++>^^])--=>^**+=======+**==========^>*=================^**]~~=*+=~
+*+====>)++=================***+=====*+===========+^<----~<}{%#[<^^====+^+========*{%%#}(~-:::::::=^^**+======+**+=======+>^*================^<+<=~=++==
=**====+)+^*===============+***+===+*+==========*^*~:::::::::-=)[]*====**+=========+)*==~::--:::::::-=^^^**+++==+***+=====>>*+===============*>+)===++==
=**=====(^>*===============+**^+++**+========*^*=-:::::::::::::-~+====+*>>+=============------:::::::::--=*++*******^*++==>>*+===============*<^(===+===
=*+=====*^^>+==============+******++====+**++~-:::::::::::::-+---~====**=^*===========+=--=-:-=<([#@@@@@@@@@@%{[[(>([(*+^*****+=============+>^>*===+===
=*+======)^<+===============+***^^^*^++*<[}#@@@@@@@@@@%#})=-:-:::-==+*>~->*==========+*-:::^}@@@%##{{(=--+(~=*)#@@@@%[)<<<]^**+=============^>*<~~====~=
~++======^<^>+==============+***<+=]%%@@@%]*=+%%{{{{{{#[^*)##(-::::~*>~-->*=========+>--~]}^*%%{{{}>{[^~*({{-:::+#%%%%%[*~=>**+============+>*>*~~==~~~~
~=+======+<>^<+=============+**<#{#%@@%%(-:::{#{}}{{[+{]-:=]=~*(>-::--:::**+=======+^--~~-::#@}}[^~-~+)}}}}@^::::=%%#(=--~~<**+==+========+>*^*==~~~====
==========<[^*(==============+^^>=>{%%%}-::::}{}}}]*---~^][##::::::::::::=*+=====+)~::::::::#%]<=----~*)][}%=::::^@*------~^^*+===+++=+==*)*^*===~~~====
==========*)<*=)*+++++++++====*^^----*{}~::::^@[])>+~--~*)(}#::::::::::::->*====*^~-::::::::*})>>>^+*><<)}@=::::=-:::::--~~^^+===+++++++^<*)*+===~~~=~~~
==========*)^*>+^>+++=+++++++++^^+--:-:-**::::^[))<>^**^>><}]::::::::::::-^+++**~-:::::::::::+()<>>^^>))]^:-^<-::::::::-~~~**+++++++++*^*^(<======~~~~~~
==========*<+===>*>^++++++++=+=+^=~-::::::::~*=-^[[)<>^^^>()-:::::::::::::=***-:::::::::::::::::------------~~-----:::-~===**+++++++*^*^*=)>+====~~~~~~~
========+~*<^++=+^^^>>*+++++===+*^*=~::::::-~*=-:-----::::::::::::::::::::=+--::::::::::::::::::::---~~~~~~~~~~~~~--:-~==+^*+++++*^^^*+++^(^+=====~~~~~~
========+~*)^=~~~~~+^>>^^*++++++++*+=-::-~~~~~~~~~~~~~~-::::::::::::::::::::::::::::::::::::::::::--~~~~~~~~~~~~~--:--~==^*+++*^>**+==~~~*(++===~=~~~~~~
~~~==~===~*(>++++++===+^>^^>^++++++**=-:--~~~~~~~~~~~~~--:::::::::::::::::::::::::::::::::::::::::::---:::::---::::-~=+^^**++++=~~~~=+***^(+++==~=~~~~~~
~~~~~~~+=~*)*~~~~~~~=*^*+***^^^^^*++*^*=---::::::--------:::::::::::::::::::::::::::::::::::::::::::::::::::::::--*]{{[^+***+++++====~~~~*(++++=~=~~~~~~
~~~~~==+==*)^++====~~~~~~~~~~~=+*^<}{}[]<=-::::::::::::::::::::::::::~*++++=========~-:::::::::::::::::::::::-=<[}}}}}{{{#]=~~~~~~~=*^^^*>(++++=~=~~~~~~
~~~===+===^<+~~~~~~+*^^^**+=*]#@#{}}}}}}}}{{]*---::::::::::::::::::::::::::::::::::::::::::::::::::::::---*([}}}}}}}}}}}}}}{%@]=~~~~~~~~~*)++++=~=~~~~~~
~===~=+==+>(^+~~~~~~~~=<}%%#{}}}}}}}}}}}}}}}}[]^~--~~-:::::::::::::::::::::::::::::::::::::::::::--~=^+-::::-+<][}}}}}}}}}}}}}}#@%)*^^^^^<(++++===~~~~~~
=====+==+*>*====+*)}%#{{}}}}}}}}}}}}}}}}}}[(+::::::~=<#%[)^+==~--:::::::::::::::::::::------~=>]{######%[+-:::::-^([}}}}}}}}}}}}}}{%%)+=~*(+++++===~~~~~
=======++*<^=^[@%{{}}}}}}}}}}}}}}}}}}}}}})~:::::::~(({%#######{{#)~-----~~~------~~----:::::+##{{##{{{{{#{{}>~:::::=)[}}}}}}}}}}}}}}}{#%[<(++++=~==~~~~~
=====++++^<*+[%##{{{}}}}}}}}}}}}}}}}}{{(=:::::::::::--+<[#####{{##^-::::::---------~-::..::+##{{{##{{{{{{[)*~-:::.:::->[}}}}}}}}}}}}}}}}{#%[<*==~~~~=~~~
 */